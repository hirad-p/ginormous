LAB 2: amino acid counter (getting started)
===========================================
------------------------
Purpose of this document
------------------------
Use this document to get started writing your MapReduce program.  I will provide a formal grading rubric for you at a later time.


----------------------
Background Information
----------------------
Amino acids are the building blocks of proteins, and nucleotides are the building blocks of amino acids.  There are 20 "standard" amino acids, and each amino is encoded by exactly 3 nucleotides (called a "codon").  There are 4 different nucleotides (A, C, T, and G) in DNA, and so there are 4^3 possible codons.  However, not all of them are used to encode the 20 "standard" amino acids (see https://en.wikipedia.org/wiki/DNA_codon_table for a list of the 20 amino acids and their corresponding codons).  There are also codons called "start" and "stop" that are used to bound a gene sequence.

Looking at that codon table, you'll notice that there's an amino acid called phenylalanine which has two possible codons: TTT and TTC, whereas the "start" codon is only defined by ATG.  

The last thing you need to understand is the concept of a reading frame(see https://en.wikipedia.org/wiki/Reading_frame for more information).  Given the sequence  AGGTGACACCGCAAGCCTTATATTAGC, there are 3 possible reading frames:
AGG TGA CAC CGC AAG CCT TAT ATT AGC
A GGT GAC ACC GCA AGC CTT ATA TTA GC
AG GTG ACA CCG CAA GCC TTA TAT TAG C


---------
Objective
---------
Write a MapReduce program (including a driver, mapper, and reducer) that counts the frequency of each amino acid (and start and stop codons) in a given FASTA file for each of the 3 reading frames.  I will provide the FASTA file in the LAB2 folder on CANVAS.

IMPORTANT NOTE: you are only to count the frequency of each amino acid that appears in the line before the newline (\n) character for each reading frame.  In other words, do NOT read into the next line to "finish" a 3-nucleotide codon in any of the 3 reading frames.

Your output must look exactly as shown below, including the formatting and frequency counts:

Alanine			3381454	3215080	3211077
Arginine		3928264	3730207	3733975
Asparagine		2936220	2784133	2790388
Aspartic acid		1758262	1670500	1668606
Cysteine		2647046	2514091	2515827
Glutamic acid		2854530	2715951	2716251
Glutamine		3046292	2895104	2894122
Glycine			4166742	3954067	3954684
Histidine		2544916	2414470	2414611
Isoleucine		4338850	4120383	4119275
Leucine			8447464	8033631	8034291
Lysine			4364002	4149451	4146707
Methionine		1368056	1303051	1302118
Phenylalanine		4376879	4157966	4158808
Proline			4153642	3948281	3949687
Serine			6964239	6610067	6612036
Stop codons		4008143	3806777	3809253
Threonine		3868541	3674922	3668828
Tryptophan		1456170	1383705	1382291
Tyrosine		2337305	2221116	2223533

Note that the first column is the string derived exactly from the codon2aa.txt file, and the columns are the frequencies for the first, second, and third reading frames, respectively.

You must submit 2 java source files (AAMapper.java and AAReducer.java) as a single ZIP file.  I will provide full source code for the driver (AADriver.java) which you must use as is.   I will provide basic templates with TODOs in the source of AAMapper.java and AAReducer.java.  I will also provide the pom.xml file for you to use to compile the program either using an IDE or the JDK.

To grade the MapReduce program, the graders will use the following command:
yarn jar CS185-jar-with-dependencies.jar spring2018.lab2.AADriver <path-to-input-file> <path-to-output-dir> <path-to-codon-table>

Specifically, the grader will run the following commands to run your submission:
1. extract the ZIP file

2. compile the source code into a JAR file:

3. copy the JAR file to a sandbox:

4. run the JAR file:
yarn jar CS185-jar-with-dependencies.jar spring2018.lab2.solution.AADriver /user/user01/LAB2/Homo_sapiens.GRCh38.dna.chromosome.1.fa /user/user01/LAB2/OUT /user/user01/LAB2/codon2aa.txt
The codon table is a file I will provide on CANVAS for you to load into your mapper and/or reducer.
